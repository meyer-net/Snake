# agg-pay server
server {
    #===> 监听端口
    listen       55561;
    listen       55562;
    listen       55563;
    listen       55564;
    listen       55565;
    listen       55566;
    listen       55567;
    listen       55568;
    listen       55569;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开，本地测试先修改/etc/hosts
    # 这里做域名解析，需要调整文件 /etc/dnsmasq.conf，并修改下述值
    # domain-needed
    # bogus-priv
    # cache-size=51200
    # listen-address=127.0.0.1

    # #注意此处指向DNS服务，实际还是向内网DNS查询
    # resolv-file=/etc/resolv.conf      
    server_name 127.0.0.1 localhost www.biz.com;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/biz_access.log combined buffer=16k;
    error_log logs/biz_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    # 获取下游token信息
    location ^~ /api/auth_token {
        internal;
        proxy_pass http://127.0.0.1:55570;
    }

    #回调页
    location ^~ /api/callback {
        #简略，本身需要判断回调信息才给出是否放权许可
        rewrite ^ http://www.coat.com;
    }

    #三方支付跳转接口
    location ^~ /api/redirect_post {
        content_by_lua_block {
            local s_format = string.format
            local s_redis = require("app.store.redis")
            local i_redis = s_redis:new({
                timeout = 1,  
                host = "127.0.0.1",
                port = 6379
            })

            local form_key = ngx.req.get_uri_args()["p"]
            local submit_form, err = i_redis:get(form_key)
            if not submit_form then
                ngx.print(s_format("数据信息错误，请联系管理员！详情：%s", err))
                return
            end

            i_redis:del(form_key)
            ngx.print(submit_form)
        }
    }

    #对 "/" 访问进行控制
    location / {
        # 默认读取 body
        lua_need_request_body on;

        content_by_lua_block {
            local s_format = string.format
            local u_each = require("app.utils.each")

            ngx.print("已进入具体BIZ站点，由此发起对三/四方支付渠道的跳转。<br />")
            ngx.print("当前服务器接受到信息：{<br />")

            u_each.json_action(ngx.req.get_headers(), function(k, v)
                ngx.print("&nbsp;&nbsp;&nbsp;", k, "：", v, "<br />")
            end)
            ngx.print("},{<br />")
            u_each.json_action(ngx.req.get_uri_args(), function(k, v)
                ngx.print("&nbsp;&nbsp;&nbsp;", k, "：", v, "<br />")
            end)
            ngx.print("},{<br />")
            u_each.json_action(ngx.req.get_post_args(), function(k, v)
                ngx.print("&nbsp;&nbsp;&nbsp;", k, "：", v, "<br />")
            end)
            ngx.print("}<br />")
            
            local resp = ngx.location.capture("/api/auth_token")
            if resp.status == ngx.HTTP_OK then
                local auth_token = resp.body

                local s_redis = require("app.store.redis")
                local i_redis = s_redis:new({
                    timeout = 1,  
                    host = "127.0.0.1",
                    port = 6379
                })
            
                local form_elements = ""
                u_each.json_action(ngx.req.get_post_args(), function(k, v)
                    form_elements = s_format("%s<input name='%s' type='hidden' value='%s' />", form_elements, k, v)
                end)

                local headers = ngx.req.get_headers()
                local redirect_url = "headers["host"]"
                local pay_url = headers["pay_host"]
                local redirect_form = s_format("<!DOCTYPE html> \
                <html> \
                    <head> \
                        <meta charset='utf-8' /> \
                        <meta name='referrer' content='no-referrer'> \
                        <title>正在转到付款页</title> \
                    </head> \
                    <body> \
                        <label>支付页跳转中，正在获取最佳通道。。。</label> \
                        <form action='%s' method='post' id='trans_form'> %s </form> \
                        <script type='text/javascript'>document.getElementById(\'trans_form\').submit();</script> \
                    </body> \
                </html>", pay_url, form_elements)

	            local ok, err = i_redis:set(auth_token, redirect_form)
                if not ok then
                    ngx.print("下单失败，原因：", err)
                    return
                end

                local redirect_self = s_format("http://%s/api/redirect_post?p=%s", redirect_url, auth_token)
                ngx.redirect(redirect_self)
            end
        }
    }
}