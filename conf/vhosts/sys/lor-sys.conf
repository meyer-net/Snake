#共享字典
lua_shared_dict sys_default 64m;
lua_shared_dict sys_locker 1m;
lua_shared_dict sys_buffer_mq 32m;
lua_shared_dict sys_buffer_locker 1m;
lua_shared_dict sys_plugin_status 1m;

#最大运行的定时器
#lua_max_running_timers 65536;

#===> 初始化公共使用块
init_by_lua_block {
    local system = require("ctx.system")

    local config_file = "./conf/vhosts/sys.conf"
    local config, store = system.init({
        config = config_file
    })

    context = {
        system = system,
        store = store,
        config = config
    }
}

#===> 初始化子线程使用块
init_worker_by_lua_block {
    local system = context.system
    system.init_worker()
}

#===> 主业务系统反代配置，默认为访问lor server{即通过or编写程式}
upstream biz_upstream {
    server localhost:$biz_port;
}

# entry server
server {
    #===> 监听端口
    listen    80;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/$project_name_access.log json buffer=8k;
    error_log logs/$project_name_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # SSI-Filter 用於過濾信息
    # location /ssi {
    #     internal;
        
    #     # 啟用SSI控制
    #     ssi on;

    #     content_by_lua_block {
    #         ngx.print(ngx.var.ssi_content)
    #     }
    # }

    # RPC代理访问
    # location /grpc {
    #     internal;
        
    #     grpc_pass grpc://$grpc_server;
    # }

    # 用于表示将远程作为子请求形式发送
    location /capture_proxy/ {
        internal;
        lua_need_request_body on;

        rewrite ^/capture_proxy/(https?)/([^/]+)/(\d+)/(.*)     /$4 break;
                
        real_ip_recursive on;
        real_ip_header X-Forwarded-For;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header Host $capture_host;
        proxy_set_header Referer $http_referer;
        proxy_set_header Payload $capture_payload;

        proxy_pass      $1://$2:$3;
    }

    #对 "/" 访问进行控制
    location / {
        # 启动线程池
        #aio threads=default;
        
        # 配置RPC反代信息
        set $grpc_server '';

        # 配置子请求反代信息
        set $capture_host $host;
        set $capture_payload "";

        # 配置业务反代信息
        set $upstream_host $host;
        set $upstream_url 'http://biz_upstream';
        set $upstream_payload "";

        rewrite_by_lua_block {
            local system = context.system
            system.redirect()
            system.rewrite()
        }

        access_by_lua_block {
            local system = context.system
            system.access()
        }

        #输出正文部分，用反代完成
        set_real_ip_from 127.0.0.1;
        set_real_ip_from 10.0.0.0/24;
        set_real_ip_from 172.16.0.0/24;
        set_real_ip_from 192.168.0.0/24;
        set_real_ip_from 192.168.1.0/24;
        
        real_ip_recursive on;
        real_ip_header X-Forwarded-For;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header Host $upstream_host;
        proxy_set_header Referer $http_referer;
        proxy_set_header Payload $upstream_payload;
        proxy_pass $upstream_url;

        header_filter_by_lua_block {
            local system = context.system
            system.header_filter()
        }

        body_filter_by_lua_block {
            local system = context.system
            system.body_filter()
        }

        log_by_lua_block {
            local system = context.system
            system.log()

            if ngx.ctx.after_log then
                ngx.ctx.after_log()
            end
        }
    }
}

# lor server - 针对lua-lor自己逻辑部分实现的代码跑全程逻辑（并不会执行执行阶段的各个plugins），相反有需要则通过entry-server进来
server {
    #===> 监听端口
    listen       $lor_port;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/$project_name_lor_access.log json buffer=8k;
    error_log logs/$project_name_lor_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    # ???存在bug需做兼容性修复，main初始化仅会执行一次
    # #静态资源文件
    # set $lor_view_root './app/views/lor';
    # location ~* /static/(.*) {
    #     alias $lor_view_root/lor/static/$1;
    # }

    # #对 "/" 访问进行控制
    # location / {
    #     # 启动线程池
    #     #aio threads=default;

    #     #访问模板变量，必须定义
    #     set $template_root '';

    #     #输出正文部分
    #     # ngx.config.prefix()
    #     content_by_lua_block {
    #         ngx.ctx.views_path = ngx.var.lor_view_root
    #         local main = require("app.main")
    #         main:run()
    #     }
    # }
}

# waf server - 防火墙配置部分，用于项目插件配置等作业
server {
    #===> 监听端口
    listen       $waf_port;

    #===> 监控模块
    stub_status on;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/$project_name_dashboard_access.log json buffer=16k;
    error_log logs/$project_name_dashboard_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #静态资源文件
    set $waf_view_root './app/views/waf';
    location ~* /static/(.*) {
        alias $waf_view_root/static/$1;
    }

    #对 "/" 访问进行控制
    location / {
        #访问模板变量，必须定义
        set $template_root '';

        #输出正文部分
        # ngx.config.prefix()
        content_by_lua_block {
            ngx.ctx.views_path = ngx.var.waf_view_root
            local main = require("app.main")
            main:run()
        }
    }
}

# (lor & waf) api server - 没有UI视图，纯接口
server {
    #===> 监听端口
    listen       $api_port;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/$project_name_api_access.log json buffer=16k;
    error_log logs/$project_name_api_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #对 "/" 访问进行控制
    location / {
        #输出正文部分
        content_by_lua_block {
            local main = require("api.main")
            main:run()
        }
    }
}

# lor ssl server
# server {
#     #===> 监听端口
#     # listen      80;
#     listen       443 ssl;

#     #编码
#     charset   utf-8;

#     #===> 域名可以有多个，用空格隔开
#     server_name 127.0.0.1 localhost;
    
#     #===> 是否开启代码缓存
#     lua_code_cache off;

#     #减少点击劫持
#     add_header X-Frame-Options DENY;
#     #禁止服务器自动解析资源类型
#     add_header X-Content-Type-Options nosniff;
#     #防XSS攻击
#     add_header X-Xss-Protection 1;
#     #使用 HSTS 策略强制浏览器使用 HTTPS 连接
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;preload" always;
    
#     #证书文件
#     ssl_certificate     $project_name_ssl.crt;
#     #私钥文件
#     ssl_certificate_key $project_name_ssl.key;
#     #优先采取服务器算法
#     ssl_prefer_server_ciphers on;
#     #使用DH文件
#     #ssl_dhparam $project_name_ssl.pem;
#     ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
#     #定义算法
#     ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";

#     #让http请求重定向到https请求   
#     # error_page 497 https://${server_name}$uri?$args;  

#     #定义本虚拟主机的访问日志
#     access_log logs/$project_name_ssl_access.log json buffer=16k;
#     error_log logs/$project_name_ssl_error.log info;

#     location = /favicon.ico {
#         log_not_found off;
#         access_log off;
#     }

#     location /robots.txt {
#         return 200 'User-agent: *\nDisallow: /';
#     }

#     #对 "/" 访问进行控制
#     location / {
#         #输出正文部分
#         content_by_lua_block {
#             local main = require("api.main")
#             main:run()
#         }

#         log_by_lua_block {
#             local system = context.system
#             system.log()

#             if ngx.ctx.after_log then
#                 ngx.ctx.after_log()
#             end
#         }
#     }
# }