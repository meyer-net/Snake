#共享字典
lua_shared_dict sys_locker 32m;
lua_shared_dict sys_buffer_locker 1m;
lua_shared_dict sys_plugin_status 1m;
lua_shared_dict sys_plugin_buffer 1024m;

#最大运行的定时器
#lua_max_running_timers 65536;

#===> 初始化公共使用块
init_by_lua_block {
    local system = require("ctx.system")

    local config_file = "./conf/vhosts/sys.conf"
    local config, store = system.init({
        config = config_file
    })

    -- the system context
    context = {
        system = system,
        store = store,
        config = config
    }
}

#===> 初始化子线程使用块
init_worker_by_lua_block {
    local system = context.system
    system.init_worker()
}

#===> 用于缓冲的API接口群
#upstream buffer_upstream {
#    server 192.168.1.62;
#}

# lor server
server {
    #===> 监听端口
    listen       8888;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #访问模板变量，必须定义
    set $template_root '';

    #定义本虚拟主机的访问日志
    access_log logs/odta-inewmax-access.log combined buffer=16k;
    error_log logs/odta-inewmax-error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #静态资源文件
    location ~* /static/(.*) {
        alias ./app/static/$1;
    }

    #对 "/" 访问进行控制
    #location /buffer_notify {
    #    internal;
    #    set $upstream_host $host;
    #    set $upstream_url 'http://buffer_upstream';
#
    #    # proxy
    #    proxy_set_header X-Real-IP $remote_addr;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    proxy_set_header X-Forwarded-Scheme $scheme;
    #    proxy_set_header Host $upstream_host;
    #    proxy_pass $upstream_url;
    #}

    #对 "/" 访问进行控制
    location / {
        #启动线程池
        #aio threads=default;

        #rewrite_by_lua_block {
        #    local system = context.system
        #    system.redirect()
        #    system.rewrite()
        #}
#
        #access_by_lua_block {
        #    local system = context.system
        #    system.access()
        #}
#
        #header_filter_by_lua_block {
        #    local system = context.system
        #    system.header_filter()
        #}
#
        #body_filter_by_lua_block {
        #    local system = context.system
        #    system.body_filter()
        #}

        #输出正文部分
        content_by_lua_block {
            context.views_path = ngx.config.prefix() .. "/app/views"
            local main = require("app.main")
            main:run()
        }

        log_by_lua_block {
            local system = context.system
            system.log()

            if ngx.ctx.after_log then
                ngx.ctx.after_log()
            end
        }
    }
}

# lor api server
server {
    #===> 监听端口
    listen       8889;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/odta-api-inewmax-access.log combined buffer=16k;
    error_log logs/odta-api-inewmax-error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #对 "/" 访问进行控制
    location / {
        #解决跨域访问问题
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Headers X-Requested-With;
        add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

        #输出正文部分
        content_by_lua_block {
            local main = require("api.main")
            main:run()
        }

        log_by_lua_block {
            local system = context.system
            system.log()

            if ngx.ctx.after_log then
                ngx.ctx.after_log()
            end
        }
    }
}