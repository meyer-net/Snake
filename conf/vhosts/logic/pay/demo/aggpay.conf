# proxy_pass http://biz_balancer;
# upstream biz_balancer {    
#     server 0.0.0.0;    
#     balancer_by_lua_block {
#         local balancer = require "ngx.balancer"      
#         local args = ngx.req.get_post_args()
#         local hosts = {"127.0.0.1","127.0.0.1","127.0.0.1"}
#         local port = 55560

#         local remote_ip = ngx.var.remote_addr  
#         local key = remote_ip..port  
#         local hash = (ngx.crc32_long(key)% 2) + 1  
#         local balancer_backend = hosts[hash]  

#         ngx.log(ngx.ERR, "request_uri=", ngx.var.request_uri, " ip_hash=", ngx.var.remote_addr, " hash=", hash, " up=", balancer_backend, ":", port) 

#         local ok, err = balancer.set_current_peer(balancer_backend, port)    
#         if not ok then    
#             ngx.log(ngx.ERR, "failed to set the current peer: ", err)    
#             return ngx.exit(500)    
#         end
#         ngx.log(ngx.DEBUG, "current peer ", port)    
#     }     
# }

# agg-pay server
server {
    #===> 监听端口
    listen       80;
    listen       55560;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/aggpay_access.log combined buffer=16k;
    error_log logs/aggpay_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #对 "/" 访问进行控制
    location / {
        #模拟聚合支付返回数据（真实环境下，需要前置风控策略层，并返回包含商品，三方信息密钥等，此处简单返回单个BIZ地址，URL）
        content_by_lua_block {
            local m_random = math.random
            function random(n1, n2)
                ngx.sleep(0.001)

                math.randomseed(tostring(ngx.now()*1000):reverse():sub(1, 9))

                if n1 and not n2 then
                    return m_random(n1)
                end

                if n1 and n2 then
                    return m_random(n1, n2)
                end

                return m_random()
            end
            
            local port = random(1,9)
            local pay_setting = {
                biz_url = string.format("127.0.0.1:5556%s", port),
                pay_url = "http://www.virtualartifacts.com"
            }

            ngx.print(require("cjson.safe").encode(pay_setting))
        }
    }
}