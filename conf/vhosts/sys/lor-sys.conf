#共享字典
lua_shared_dict sys_default 64m;
lua_shared_dict sys_locker 1m;
lua_shared_dict sys_buffer_mq 32m;
lua_shared_dict sys_buffer_locker 1m;
lua_shared_dict sys_plugin_status 1m;

#最大运行的定时器
#lua_max_running_timers 65536;

#===> 初始化公共使用块
init_by_lua_block {
    local system = require("ctx.system")

    local config_file = "./conf/vhosts/sys.conf"
    local config, store = system.init({
        config = config_file
    })

    #-- the system context
    context = {
        system = system,
        store = store,
        config = config
    }
}

#===> 初始化子线程使用块
init_worker_by_lua_block {
    local system = context.system
    system.init_worker()
}

# lor server
server {
    #===> 监听端口
    listen       $ui_port;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #访问模板变量，必须定义
    set $template_root '';

    #定义本虚拟主机的访问日志
    access_log logs/access.log combined buffer=16k;
    error_log logs/error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #静态资源文件
    location ~* /static/(.*) {
        alias ./app/static/$1;
    }

    #对 "/" 访问进行控制
    location / {
        #启动线程池
        #aio threads=default;

        rewrite_by_lua_block {
            local system = context.system
            system.redirect()
            system.rewrite()
        }

        access_by_lua_block {
            local system = context.system
            system.access()
        }

        header_filter_by_lua_block {
            local system = context.system
            system.header_filter()
        }

        body_filter_by_lua_block {
            local system = context.system
            system.body_filter()
        }

        #输出正文部分
        content_by_lua_block {
            context.views_path = ngx.config.prefix() .. "/app/views"
            local main = require("app.main")
            main:run()
        }

        log_by_lua_block {
            local system = context.system
            system.log()

            if ngx.ctx.after_log then
                ngx.ctx.after_log()
            end
        }
    }
}

# lor api server
server {
    #===> 监听端口
    listen       $api_port;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/lor-api-access.log combined buffer=16k;
    error_log logs/lor-api-error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #对 "/" 访问进行控制
    location / {
        #解决跨域访问问题
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Headers X-Requested-With;
        add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

        #输出正文部分
        content_by_lua_block {
            local main = require("api.main")
            main:run()
        }

        log_by_lua_block {
            local system = context.system
            system.log()

            if ngx.ctx.after_log then
                ngx.ctx.after_log()
            end
        }
    }
}

# lor ssl server
server {
    #===> 监听端口
    listen       443 ssl;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #减少点击劫持
    add_header X-Frame-Options DENY;
    #禁止服务器自动解析资源类型
    add_header X-Content-Type-Options nosniff;
    #防XSS攻击
    add_header X-Xss-Protection 1;
    #使用 HSTS 策略强制浏览器使用 HTTPS 连接
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;preload" always;
    
    #证书文件
    ssl_certificate     thiszw.com.crt;
    #私钥文件
    ssl_certificate_key thiszw.com.key;
    #优先采取服务器算法
    ssl_prefer_server_ciphers on;
    #使用DH文件
    #ssl_dhparam thiszw.com.pem;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    #定义算法
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";

    #定义本虚拟主机的访问日志
    access_log logs/lor-ssl-access.log combined buffer=16k;
    error_log logs/lor-ssl-error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #对 "/" 访问进行控制
    location / {
        #输出正文部分
        content_by_lua_block {
            local main = require("api.main")
            main:run()
        }

        log_by_lua_block {
            local system = context.system
            system.log()

            if ngx.ctx.after_log then
                ngx.ctx.after_log()
            end
        }
    }
}