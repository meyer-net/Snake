#定义Nginx运行的用户和用户组
user  project orsys;

#Nginx进程数，建议设置为等于CPU总核心数(如,2个四核的cpu计为8)。
worker_processes  $processor_count;

#为每个进程分配cpu，worker_processes中将多个进程分配到8个cpu，当然可以写多个，或者将一个进程分配到多个cpu
worker_cpu_affinity $cpu_affinity;

#更改Nginx进程的最大打开文件数限制，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，该值控制 “too many open files” 的问题
worker_rlimit_nofile $limit_nofile;  #此处为65535/4

#进程文件
pid tmp/sys-nginx.pid;

#google-perftools的加载
#google_perftools_profiles tmp/tcmalloc;

#工作模式与连接数上限
events {
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    multi_accept on; #告诉nginx收到一个新连接通知后接受尽可能多的连接。
    accept_mutex off;
    worker_connections  $limit_nofile; #单个进程最大连接数（最大连接数=连接数*进程数），1核默认配8000。
}

http {
    #文件扩展名与文件类型映射表
    include mime.types;

    #默认文件类型
    default_type  text/html;

    #默认编码
    charset utf-8;

    #日志格式设定
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  json  '{"@timestamp":"$time_iso8601",'
                      '"slb_user":"$remote_user",'
                      '"slb_ip":"$remote_addr",'
                      '"client_ip":"$http_x_forwarded_for",'
                      '"server_ip":"$server_addr",'
                      '"size":$body_bytes_sent,'
                      '"response_time":$request_time,'
                      '"domain":"$host",'
                      '"method":"$request_method",'
                      '"request_uri":"$request_uri",'
                      '"url":"$uri",'
                      '"app_version":"$HTTP_APP_VERSION",'
                      '"referer":"$http_referer",'
                      '"agent":"$http_user_agent",'
                      '"status":"$status",'
                      '"device_code":"$HTTP_HA"}';

    #是否开启重写日志
    rewrite_log on;

    #关闭在错误页面中的nginx版本数字
    server_tokens off;

    #服务器名字的hash表大小
    server_names_hash_bucket_size 128; 

    #上传文件头部大小限制，一般一个请求的头部大小不会超过1k
    client_header_buffer_size 4k; 

    #上传文件数据包大小限制
    client_body_buffer_size 10m;

    #设定请求缓存
    large_client_header_buffers 4 64k; 

    #设定请求缓存
    client_max_body_size 8m; 

    #通用代理设置
    proxy_headers_hash_max_size 51200; #设置头部哈希表的最大值，不能小于你后端服务器设置的头部总数
    proxy_headers_hash_bucket_size 6400; #设置头部哈希表大小

    tcp_nopush on; #防止网络阻塞(告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送)
    tcp_nodelay on; #防止网络阻塞(告诉nginx不要缓存数据，而是一段一段的发送，当需要及时发送数据时，就应该给应用设置这个属性)

    #长连接超时时间，单位是秒
    keepalive_timeout 15; 

    #设置请求头的超时时间
    client_header_timeout 5;

    #设置请求体的超时时间
    client_body_timeout 10;

    #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    #指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
    send_timeout 10;

    #清除指定敏感头部
    more_clear_headers 'Server';

    #指定DNS服务器的地址
    #resolver 223.5.5.5 223.6.6.6;
    #resolver 100.100.2.136 100.100.2.138;
    resolver $resolvers;

    # cache informations about file descriptors, frequently accessed files 
    # can boost performance, but you need to test those values 
    open_file_cache max=65535 inactive=10s; # 打开缓存的同时也指定了缓存最大数目，以及缓存的时间
    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间
    open_file_cache_min_uses 1; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数
    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件

    #共享字典（分别用来存放锁和计数器数据，该处两个定义使用在acquire.lua示例）
    lua_shared_dict sys_data 64m;
    lua_shared_dict sys_locks 32m;

    #关联LUA产生连接池大小，例如REDIS的SET_KEEPALIVE
    #注意：
    #    1、连接池是每Worker进程的，而不是每Server的；
    #    2、当连接超过最大连接池大小时，会按照LRU算法回收空闲连接为新连接使用；
    #    3、连接池中的空闲连接出现异常时会自动被移除；
    #    4、连接池是通过ip和port标识的，即相同的ip和port会使用同一个连接池（即使是不同类型的客户端如Redis、Memcached）；
    #    5、连接池第一次set_keepalive时连接池大小就确定下了，不会再变更；
    lua_socket_pool_size 32;
    lua_socket_keepalive_timeout 60s;

    #===> 是否开启代码缓存
    lua_code_cache off;

    # lor initialization
    lua_package_path "./app/?.lua;/usr/local/opt/luarocks/share/lua/5.1/?.lua;/clouddisk/attach/openresty/integration_libs/?.lua;./?.lua;/usr/local/opt/openresty/luafws/lor/?.lua;;;;";
    lua_package_cpath "./app/library/?.so;/usr/local/opt/openresty/site/lualib/?.so;/usr/local/opt/openresty/lualib/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/opt/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;;";

    set_real_ip_from   127.0.0.1;
    set_real_ip_from   127.0.0.1;     #指定接收来自哪个前端发送的 IP head 可以是单个IP或者IP段
    real_ip_header     X-Real-IP;          #IP head 的对应参数，默认即可。

    # 包含所有的虚拟主机的配置文件
    include vhosts/sys/*.conf;
    include vhosts/logic/*.conf;
    #include vhosts/logic/pay/*.conf;
    #include vhosts/logic/pay/demo/*.conf;
}