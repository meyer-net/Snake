# agg-pay server
server {
    #===> 监听端口
    listen       80;
    listen       55570;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开，本地测试先修改/etc/hosts
    # 这里做域名解析，需要调整文件 /etc/dnsmasq.conf，并修改下述值
    # domain-needed
    # bogus-priv
    # cache-size=51200
    # listen-address=127.0.0.1

    # #注意此处指向DNS服务，实际还是向内网DNS查询
    # resolv-file=/etc/resolv.conf      
    server_name virtualartifacts.com www.virtualartifacts.com thridpay.com www.thridpay.com;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/thridpay_access.log combined buffer=16k;
    error_log logs/thridpay_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    #关闭gzip压缩输出，谨防数据被压缩
    gzip off; 

    #对 "/" 访问进行控制
    # location / {
    #     content_by_lua_block {
    #         ngx.print("已进入具体第三/四方支付。<br />")
    #         ngx.print("当前服务器接受到信息：{<br />")

    #         local u_each = require("app.utils.each")
    #         u_each.json_action(ngx.req.get_headers(), function(k, v)
    #             ngx.print("&nbsp;&nbsp;&nbsp;", k, "：", v, "<br />")
    #         end)
    #         ngx.print("},{<br />")
            
    #         ngx.req.read_body()
    #         u_each.json_action(ngx.req.get_uri_args(), function(k, v)
    #             ngx.print("&nbsp;&nbsp;&nbsp;", k, "：", v, "<br />")
    #         end)
    #         u_each.json_action(ngx.req.get_post_args(), function(k, v)
    #             ngx.print("&nbsp;&nbsp;&nbsp;", k, "：", v, "<br />")
    #         end)
    #         ngx.print("}<br />")
    #     }
    # }

    #访问根路径
    root app/outer;

    #对 / 访问进行控制
    location / {

        #设定默认文档
        index  info.php;
    
        #找不到文件时的尝试
        try_files $uri $uri/ @rewrite;
    }

    #对重写的新定义
    location @rewrite {
        set $static 0;

        if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
            set $static 1;
        }

        if ($static = 0) {
            rewrite ^/(.*)$ /index.php?s=/$1;
        }
    }

    #禁止访问 .ht 程序文件
    location ~ /\.ht {
        deny  all;
    }

    location ^~ /api/auth_token {
        content_by_lua_block {
            local u_math = require("app.utils.math")
            ngx.print("rdm_tk_", u_math.random_range(1111111111, 9999999999))
        }
    }

    #对 .php/ 访问进行控制
    location ~ \.php/ {
        if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { 
        }

        include nginx-php.conf;

        #安全问题：在PHP开启「cgi.fix_pathinfo」的情况下，PHP可能会把错误的文件类型当作PHP文件来解析。
        #如果Nginx和PHP安装在同一台服务器上的话，那么最简单的解决方法是用「try_files」指令做一次过滤 
        try_files $uri =404;

        fastcgi_param SCRIPT_NAME     $1;
        fastcgi_param PATH_INFO       $2;
        fastcgi_param SCRIPT_FILENAME $document_root$1;
    }

    #对 .php 访问进行控制
    location ~ \.php$ {
        include nginx-php.conf;

        #安全问题：在PHP开启「cgi.fix_pathinfo」的情况下，PHP可能会把错误的文件类型当作PHP文件来解析。
        #如果Nginx和PHP安装在同一台服务器上的话，那么最简单的解决方法是用「try_files」指令做一次过滤 
        try_files $uri =404;

        set $call_back "<script>setTimeout(function(){location.href='http://${server_addr}/api/callback'},9000)</script>";

        subs_filter '<body>' '<body>${call_back}';
    }
}