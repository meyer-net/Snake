# proxy_pass http://biz_balancer;
# upstream biz_balancer {    
#     server 0.0.0.0;    
#     balancer_by_lua_block {
#         local balancer = require "ngx.balancer"      
#         local args = ngx.req.get_post_args()
#         local hosts = {"127.0.0.1","127.0.0.1","127.0.0.1"}
#         local port = 55560

#         local remote_ip = ngx.var.remote_addr  
#         local key = remote_ip..port  
#         local hash = (ngx.crc32_long(key)% 2) + 1  
#         local balancer_backend = hosts[hash]  

#         ngx.log(ngx.ERR, "request_uri=", ngx.var.request_uri, " ip_hash=", ngx.var.remote_addr, " hash=", hash, " up=", balancer_backend, ":", port) 

#         local ok, err = balancer.set_current_peer(balancer_backend, port)    
#         if not ok then    
#             ngx.log(ngx.ERR, "failed to set the current peer: ", err)    
#             return ngx.exit(500)    
#         end
#         ngx.log(ngx.DEBUG, "current peer ", port)    
#     }     
# }

# coat proxy server
server {
    #===> 监听端口
    listen       5557;
    #listen       5560;

    #编码
    charset   utf-8;

    #===> 域名可以有多个，用空格隔开
    server_name 127.0.0.1 localhost;
    
    #===> 是否开启代码缓存
    lua_code_cache off;

    #定义本虚拟主机的访问日志
    access_log logs/coat_proxy_access.log combined buffer=16k;
    error_log logs/coat_proxy_error.log info;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    # 获取下游通道信息
    location ^~ /api/bal_host {
        internal;
        proxy_pass http://127.0.0.1:55560;
    }

    #对 "/" 访问进行控制
    location / {
        set $proxy_host "";
        set $pay_host "";
        rewrite_by_lua_block {
            local resp = ngx.location.capture("/api/bal_host")
            if resp.status == ngx.HTTP_OK then
                local pay_setting = require("cjson.safe").decode(resp.body)
                ngx.var.proxy_host = pay_setting.biz_url
                ngx.var.pay_host = pay_setting.pay_url
            end
        }

        # proxy
        proxy_buffering off;
        proxy_redirect ~^http://www.coat.com(.*) http://$proxy_host$1;
        proxy_pass $scheme://$proxy_host;
        proxy_set_header Host                  $proxy_host;
        proxy_set_header Accept-Encoding       "";
        proxy_set_header X-Real-IP             $remote_addr;
        proxy_set_header X-Forwarded-For       $remote_addr;
        proxy_set_header X-Forwarded-Scheme    $scheme;
        proxy_set_header User-Agent            $http_user_agent;
        proxy_set_header Pay-Host              $pay_host;
        proxy_set_header Origin                $scheme://$proxy_host;
        proxy_set_header Referer               $scheme://$proxy_host$request_uri;
        #subs_filter https:// http://;
        subs_filter $host $proxy_host;
        proxy_cookie_domain $proxy_host $http_host;
    }
}